/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package camelinaction;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import java.util.HashMap;
import java.util.Map;

import javax.jms.ConnectionFactory;
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.camel.component.jms.JmsComponent;

public class Consumer implements Runnable {
	
	String var;
	
	public Consumer(String var) {
		this.var = var;
	}

    public void hey(String var) throws Exception {
        // create CamelContext
        CamelContext context = new DefaultCamelContext();

        // connect to ActiveMQ JMS broker listening on localhost on port 61616
        ConnectionFactory connectionFactory = 
        	new ActiveMQConnectionFactory("tcp://localhost:61616");
        context.addComponent("jms",
            JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));
              
        
        ProducerTemplate template = context.createProducerTemplate();
        Exchange exch = ExchangeBuilder.anExchange(context).withBody("hello!").withHeader("header1", "one").withHeader("header2", "two").build();
        template.sendBody("direct:try", exch);
        
        
        context.addRoutes(new RouteBuilder() {
        	public void configure() {
        		from("direct:try").
        		to("jms:try-${header.header1}-{header.header2}");
        	}
        });
         
        
        // start the route and let it do its work (transport data)
        context.start();
        Thread.sleep(1000);
        context.stop();

    }

	@Override
	public void run() {
		try {
			hey(var);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}